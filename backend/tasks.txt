#NOTE: every entity table must have a key(or id) specified or not
	-so, the user table must have a user id of type autonumber
	-go through the validations and you will find some fields cannot be null update them likewise
#UPDATE: a new folder is created in the peerhelper directory(server): it contains all the scripts for backend calls, these scripts do not work as of now and needs to be updated  

#version control
-fork the repository
-clone the repository in your local server
-make your changes
-commit
-pull at regular intervals to make sure that your changes are up to date
- i will merge it and test it
-make sure that repository includes updated structure of database 

#database
-create a database
-store user data
	=id(autonumber), firstname(varchar(15)), lastname(varchar(15)), username(varchar(15)), email(varchar(255)), password(varchar(15))
	::every field (except lastname) null
	::unique email and username
-store community data
	=id(autonumber),name(varchar(16)), created by(foreign key on user.id), created on(date), no. of members(number), type(number(1))
	::all fields not null
	::unique name
-store user community relation
	=community id(foreign key on community.id), user id(foreign key on user.id), date joined(date), is_mod(boolean)
	::all fields not null
-store posts data
	=id(autonumber), title(varchar(255)), post_text(text), score(number(6)), no_of_comments(number(5)), posted by(foreign key on user.id), posted on(date), posted at(foreign key on community.id)
	::all fields not null
-store reactions
	=id(autonumber), type(char(1)), by(foreign key on user.id), time(datetime), to_reaction(number(5)), at(foreign key on post.id), comment_text(varchar(255)), score(number(6)), no_of_comments(number(5)) 
	::comment_text, score and no_of_comments can be null
	::other fields not null

#database handling from backend
-signup functions-- add_user, username_exists
-login functions- password_check, login
-user functions- remove_user, edit_user_details
-community functions - add_community, remove_community, add_members, remove_members, create_moderator, remove_moderator, change_type
-post functions - add_post, remove_post, edit_post
-reaction functions - add_reaction, remove_reaction, edit_reaction

#session management
-find a strategy and tell me

#requests from frontend(signup and login)
-signup(signup.php)-- frontend will send data from signup
		- the data will be [fname, lname, uname, email, password, repassword]
		- data will be send via POST method
		- backend script will read the data and validate it
		- if validated- it will add the user to database, login the user and echo success code("0")
		- else- it will echo an error code
-login(login.php)-- frontend will send login credentials
	   - the data will be [uname, password]
	   - data will be send via POST method
	   - backend script will read the data and validate it
	   - if validated- it will login the user and echo success code("0")   

#validation
	-tests should be performed in the given order
	-the validation should be done for each parameter(fname, lname, uname, email, password, repassword) even if any parameter fails the validation 
	-the validation should be done in order for each parameter till a test fails

	signup- fname1- it should not be empty
				 3- not be longer than given length(in database)
		  		 5- it should only contain alphabets (not even space)
		  		 
		  - lname 3- not be longer than given length(in database)
		          5- it should only contain alphabets (not even space)
		  		 
		  - uname1- it should not be empty
		  		 3- not be longer than given length(in database)
		  		 4- first letter should only be a letter or underscore
		  		 5- it should only contain alphabets or number or underscore(_) (not even space)
		  		 6- it should be unique

		  - email1- it should not be empty
		  		 4- it should be a valid email address(format wise)
		  		 6- it should be unique

		  - password1- it should not be empty

		  - repassword2- it should be same as password
		  		 	  3- it should be 8 to 15 character long
		  		 	  4- it should contain at least 1 lowercase, 1 capital letter, 1 number
		  		 	  5- it should not contain any character other than alphabets, numbers and [@#$!?_](not even space)

	login- uname-[1] it should not be empty
				-[3] it should be present in database

		   password-[2] it should not be empty
		   
		   once uname and password validates:
		   -[4]username and password match

#error code 
-signup-
	error code would be a 6 character string, each character corresponding to 1 parameter [fname, lname, uname, email, pass, repass]: set 0 for parameter being validated correctly, and 1-7 based on the numbering of error

-login- error codes:a character, see the numbers, 0 for no error
